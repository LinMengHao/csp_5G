package com.xzkj.smsService.controller;


import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.xzkj.smsService.entity.TUser;
import com.xzkj.smsService.entity.User;
import com.xzkj.smsService.service.TUserService;
import com.xzkj.utils.MD5Utils;
import com.xzkj.utils.R;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RestController;

import javax.annotation.PostConstruct;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.*;

/**
 * <p>
 *  前端控制器
 * </p>
 *
 * @author LinMengHao
 * @since 2022-10-13
 */

@Slf4j
@RefreshScope
@RestController
@RequestMapping("/baseservice/t-user")
public class TUserController {
    @Autowired
    TUserService service;
    @Value("${lmh.name}")
    private String name;
    @Value("${lmh.age}")
    private Integer age;

    @Value("${lmh.phone}")
    private List<Integer> phone=new ArrayList<>();


    @PostMapping(value = "findAll",consumes = {MediaType.APPLICATION_JSON_VALUE},
    produces = {MediaType.APPLICATION_JSON_VALUE})
    public R test(){
        List<TUser> list= service.findAll();
        log.info(list.toString());
        log.info("name: "+name);
        log.info("age: "+age);
        log.info("phone"+phone.toString());
        return R.ok();
    }
    @Test
    public void test1(){
        long time = new Date().getTime();
        System.out.println("ts:"+time);
        String s = MD5Utils.MD5Encode("acc=xiuzhi&ts="+time+"&sign=1"+"|||pwd=xiuzhi66");
        System.out.println("token:"+s);
    }
    @Test
    public void tes(){
        long time = new Date().getTime();
        System.out.println("ts:"+time);
        String s = MD5Utils.MD5Encode("acc=xiuzhi&ts="+time+"|||pwd=xiuzhi66");
        System.out.println("token:"+s);
    }


    @Test
    public void test2(){
        JSONObject jsonObject=new JSONObject();
        JSONObject params=new JSONObject();
        String[] split = "hhh,lll,xxx".split(",");
        for (int i = 1; i <= split.length; i++) {
            String key="v"+i;
            params.put(key,split[i-1]);
        }
        jsonObject.put("vars",params.toString());
        System.out.println(params.toJSONString());
        System.out.println(jsonObject.toJSONString());
    }
    @Test
    public void test3(){
        String spid="1195";
        String login="admin";
        String pwd= MD5Utils.MD5Encode(login+"!yJIE7TU6").toUpperCase();
        JSONObject submitJson = new JSONObject();
        submitJson.put("phones","18756232770");
        submitJson.put("sn","20221116111300001");
        submitJson.put("spid",spid);
        submitJson.put("login",login);
        submitJson.put("pwd",pwd);
        submitJson.put("tid","221116102159200002");
        System.out.println(submitJson.toJSONString());
    }
    @Test
    public void test4() throws UnsupportedEncodingException {
        String decode = URLDecoder.decode("");
        System.out.println(decode);
    }
    @Test
    public void test_4() throws UnsupportedEncodingException {
        String decode = URLDecoder.decode("body=reports

        System.out.println(decode);
    }
    @Test
    public void test5(){
        Map<String,String> map=new HashMap<>();
        map.put("phone","18756232770");
        map.put("param","99999");
        List<Map<String,String>> list=new ArrayList<>();
        list.add(map);
        JSONObject submitJson = new JSONObject();
        submitJson.put("phones",list);
        System.out.println("map: "+map.toString());
        System.out.println("list: "+list.toString());
        System.out.println("json: "+submitJson.toJSONString());
    }
    @Test
    public void test6(){
        JSONObject submitJson = new JSONObject();
        submitJson.put("Phones","mobile");
        submitJson.put("SiID","siId");
        submitJson.put("Authenticator","authenticator");
        submitJson.put("Date","date");
        submitJson.put("Method","send");
        submitJson.put("MsgID","channelMmsId");
        List<JSONObject> content=new ArrayList<>();
        submitJson.put("Method","option");
        String channelParam="v1=djskdj,v2=dshdksj,v3=shdsj,v4=oqieo3h4";
        String[] split = channelParam.split(",");
        for (int i = 1; i <= split.length; i++) {
            JSONObject jsonObject=new JSONObject();
            jsonObject.put("Frame","001-"+i);
            JSONObject jsonObject1=new JSONObject();
            String[] value=split[i-1].split("=");
            jsonObject1.put(value[0],value[1]);
            jsonObject.put("Param",jsonObject1);
            content.add(jsonObject);
        }
        submitJson.put("content",content);
        System.out.println(submitJson.toJSONString());

        List<String> reportList = submitJson.containsKey("content")?submitJson.getObject("content",List.class):new ArrayList<>();
        System.out.println(reportList.toString());
    }

    @Test
    public void test7(){
        JSONObject submitJson = new JSONObject();
        submitJson.put("content","[{\"type\":1,\"ext\":\"txt\",\"body\":\"…\"},{\"type\":2,\"ext\":\"jpg\",\"body\":\"…\"}]");

        JSONArray content = submitJson.getJSONArray("content");
        JSONObject jsonObject=new JSONObject();
        jsonObject.put("name","lmh");
        content.add(jsonObject);
        System.out.println(JSONObject.parseObject(content.getString(2)).get("name"));
    }
    @Test
    public void test8(){
        String channelParam="date1=11月28日";
        StringBuilder stringBuilder=new StringBuilder();
        String[] split = channelParam.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split1 = split[i].split("=");
            stringBuilder.append(split1[1]);
            if(i!=split.length-1){
                stringBuilder.append(",");
            }
        }
        System.out.println(stringBuilder.toString());
    }
}

