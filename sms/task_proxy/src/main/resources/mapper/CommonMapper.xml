<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xzkj.taskProxy.mapper.ICommonMapper">

    <!-- 批量更新，通过接收传进来的参数list进行循环着组装sql -->
    <update id="batchUpdate" parameterType="java.util.List">
        <!-- 接收list参数，循环着组装sql语句，注意for循环的写法
             separator=";" 代表着每次循环完，在sql后面放一个分号
             item="cus" 循环List的每条的结果集
             collection="list" list 即为 map传过来的参数key -->
        <foreach collection="list" separator="" item="cus">${cus}</foreach>
    </update>
    <select id="appInfoList" parameterType="String" resultType="java.util.HashMap">
        SELECT * FROM t_application
    </select>
    <select id="blactGroupInfo" parameterType="String" resultType="java.util.HashMap">
        select * from e_black_group where id = ${groupId}
    </select>
    <select id="blactRelateList" parameterType="String" resultType="java.util.HashMap">
        select * from e_black_related where group_id = ${groupId} order by priority desc
    </select>
    <select id="modelInfoList" parameterType="String" resultType="java.util.HashMap">
        SELECT model_id,app_id,sign_id,title FROM e_model_info WHERE status = 1 or status = 7 or status = 5
    </select>
    <select id="modelInfoNewList" parameterType="String" resultType="java.util.HashMap">
        SELECT model_id,app_id,sign_id,title FROM e_model_info_new WHERE status = 1 or status = 5
    </select>
    <select id="signInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT * FROM e_model_sign WHERE sign_id=#{signId}
    </select>
    <select id="channelInfoList" parameterType="String" resultType="java.util.HashMap">
        SELECT * FROM t_channel WHERE STATUS = 'normal' AND link_max>0
    </select>
    <select id="routeBaseList" parameterType="String" resultType="java.util.HashMap">
        SELECT * FROM e_route_base WHERE STATUS = 1
    </select>
    <select id="tableInfoList" parameterType="String" resultType="java.util.HashMap">
        SHOW CREATE TABLE ${tableName}
    </select>
    <update id="createNewTable" parameterType="String">
        ${createSql}
    </update>
    <select id="commonInfoList" parameterType="String" resultType="java.util.HashMap">
        ${selectSql}
    </select>
    <select id="segmentList" parameterType="String" resultType="java.util.HashMap">
        SELECT * FROM c_mobile_hcode
    </select>
    <select id="statisticDay" parameterType="map" resultType="java.util.HashMap">
        SELECT
            date_format( substring( 'mms_sender_${logDate}', 12, 8 ), '%Y-%m-%d' ) AS log_date,app.id as app_id,
            mt.channel_id,mt.company_id,
            count( 1 ) AS send_total,
            SUM( CASE WHEN mt.`status` = 'DELIVRD' THEN 1 ELSE 0 END ) AS report_delivrd,
            SUM( CASE WHEN mt.`status` = 'LIMIT' THEN 1 ELSE 0 END ) AS load_delivrd,
            SUM(CASE WHEN mt.`status`='mk:0010'  then 1 else 0 end) AS load_undeliv,
            SUM( CASE WHEN mt.`status` IS NOT NULL AND mt.`status` != '' AND mt.`status` != 'DELIVRD' AND mt.`status` != 'LIMIT' AND mt.`status` != 'BLACK' AND mt.`status` != 'submit' THEN 1 ELSE 0 END ) AS report_undeliv,
            SUM( case WHEN mt.`status`='BLACK'  then 1 else 0 end ) as report_black,
            SUM( CASE WHEN mt.`status` IS NULL OR mt.`status` = 'submit' THEN 1 ELSE 0 END ) AS report_unknown,
            '${updateTime}' as update_time
        FROM
            mms_sender_${logDate} mt
                LEFT JOIN t_application app on mt.app_name=app.app_name
        GROUP BY app.id,channel_id,company_id
    </select>
    <insert id="insertOrUpdateStatistic">
        INSERT IGNORE INTO data_statistic_app_channel (log_date, company_id, app_id, channel_id, send_total, report_delivrd, report_undeliv,report_black,load_delivrd, load_undeliv,report_unknown,update_time)
        VALUES
        <foreach collection="mapList" index="index" item="item" separator=",">
            (#{item.log_date,jdbcType=TIMESTAMP}, #{item.company_id}, #{item.app_id}, #{item.channel_id}, #{item.send_total}, #{item.report_delivrd}, #{item.report_undeliv}, #{item.report_black},#{item.load_delivrd}, #{item.load_undeliv}, #{item.report_unknown},#{item.update_time})
        </foreach>
        ON DUPLICATE KEY UPDATE
        send_total = VALUES(send_total),
        report_delivrd = VALUES(report_delivrd),
        report_undeliv = VALUES(report_undeliv),
        report_black = VALUES(report_black),
        report_unknown = VALUES(report_unknown),
        load_delivrd = VALUES(load_delivrd),
        load_undeliv = VALUES(load_undeliv),
        update_time = VALUES(update_time)
    </insert>
</mapper>